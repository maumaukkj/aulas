#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define TAM 8 // Tamanho do tabuleiro

int main() {
    char tabuleiro[TAM][TAM];
    int opcao;
    int fimDeJogo = 0;

    // Inicializar tabuleiro com configuração inicial
    const char* pecasLinha1 = "TCBDRBCT";
    const char* pecasLinha2 = "PPPPPPPP";

    for (int i = 0; i < TAM; i++) {
        tabuleiro[0][i] = pecasLinha1[i]; // Linha 1: peças pretas principais
        tabuleiro[1][i] = pecasLinha2[i]; // Linha 2: peões pretos
        tabuleiro[6][i] = 'p';            // Linha 7: peões brancos
        tabuleiro[7][i] = tolower(pecasLinha1[i]); // Linha 8: peças brancas principais
    }
    for (int i = 2; i < 6; i++) {
        for (int j = 0; j < TAM; j++) {
            tabuleiro[i][j] = '.'; // Linhas intermediárias vazias
        }
    }

    // Loop principal do jogo
    do {
        // Menu principal
        printf("\n=== Jogo de Xadrez ===\n");
        printf("1. Exibir Tabuleiro\n");
        printf("2. Mover Peça\n");
        printf("3. Reiniciar Jogo\n");
        printf("4. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        if (opcao == 1) {
            // Exibir tabuleiro
            printf("\n   a b c d e f g h\n");
            for (int i = 0; i < TAM; i++) {
                printf("%d  ", 8 - i);
                for (int j = 0; j < TAM; j++) {
                    printf("%c ", tabuleiro[i][j]);
                }
                printf("\n");
            }
        } else if (opcao == 2) {
            // Mover peça
            char origem[3], destino[3];
            printf("Digite a posição de origem (ex: e2): ");
            scanf("%s", origem);
            printf("Digite a posição de destino (ex: e4): ");
            scanf("%s", destino);

            // Validar entrada
            if (strlen(origem) != 2 || strlen(destino) != 2 || origem[0] < 'a' || origem[0] > 'h' ||
                origem[1] < '1' || origem[1] > '8' || destino[0] < 'a' || destino[0] > 'h' ||
                destino[1] < '1' || destino[1] > '8') {
                printf("Entrada inválida. Tente novamente.\n");
                continue;
            }

            // Converter coordenadas
            int origemX = 8 - (origem[1] - '0');
            int origemY = origem[0] - 'a';
            int destinoX = 8 - (destino[1] - '0');
            int destinoY = destino[0] - 'a';

            // Verificar se há peça na posição de origem
            if (tabuleiro[origemX][origemY] == '.') {
                printf("Não há peça na posição de origem.\n");
                continue;
            }

            // Mover peça (movimento básico, sem regras específicas)
            tabuleiro[destinoX][destinoY] = tabuleiro[origemX][origemY];
            tabuleiro[origemX][origemY] = '.';

            // Verificar vitória (se um rei foi capturado)
            int reiBranco = 0, reiPreto = 0;
            for (int i = 0; i < TAM; i++) {
                for (int j = 0; j < TAM; j++) {
                    if (tabuleiro[i][j] == 'R') reiPreto = 1;
                    if (tabuleiro[i][j] == 'r') reiBranco = 1;
                }
            }
            if (!reiPreto) {
                printf("Vitória do jogador branco!\n");
                fimDeJogo = 1;
            } else if (!reiBranco) {
                printf("Vitória do jogador preto!\n");
                fimDeJogo = 1;
            }
        } else if (opcao == 3) {
            // Reiniciar tabuleiro
            for (int i = 0; i < TAM; i++) {
                tabuleiro[0][i] = pecasLinha1[i];
                tabuleiro[1][i] = pecasLinha2[i];
                tabuleiro[6][i] = 'p';
                tabuleiro[7][i] = tolower(pecasLinha1[i]);
            }
            for (int i = 2; i < 6; i++) {
                for (int j = 0; j < TAM; j++) {
                    tabuleiro[i][j] = '.';
                }
            }
            printf("Jogo reiniciado!\n");
        } else if (opcao != 4) {
            printf("Opção inválida!\n");
        }
    } while (opcao != 4 && !fimDeJogo);

    printf("Obrigado por jogar!\n");
    return 0;
}
